{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","crypto","randomBytes","seed","setSeed","derive","setDerive","hdKey","HDKey","fromMasterSeed","deriveError","hdKeyDerived","className","Container","Form","Button","variant","size","block","onClick","onChange","e","target","value","FormControl","toString","href","style","border","privateExtendedKey","publicExtendedKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"geAgDeA,MA1Cf,WAAgB,IAAD,EACWC,mBAASC,IAAOC,YAAY,KADvC,mBACNC,EADM,KACAC,EADA,OAEeJ,mBAAS,KAFxB,mBAENK,EAFM,KAEEC,EAFF,KAIPC,EAAQC,IAAMC,eAAeN,GAE/BO,GAAc,EACZC,EAAgB,WACpB,IACE,OAAOJ,EAAMF,OAAOA,GACpB,SAEA,OADAK,GAAc,EACPH,GALW,GAStB,OACE,qBAAKK,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,OAAK,EACvCC,QAAS,kBAAMf,EAAQH,IAAOC,YAAY,MAC1CkB,SAAU,SAACC,GAAD,OAAYf,EAAUe,EAAEC,OAAOC,QAF3C,+BAKA,eAACV,EAAA,EAAD,CAAWD,UAAU,OAArB,UACE,uCACA,cAACY,EAAA,EAAD,CAAaD,MAAOpB,EAAKsB,SAAS,OAAQL,SAAU,SAACC,GAAD,OAAYjB,EAAQiB,EAAEC,OAAOC,UACjF,+CAAiB,mBAAGG,KAAK,IAAIP,QAAS,kBAAMb,EAAU,MAArC,mCAAjB,MAAwF,mBAAGoB,KAAK,IAAIP,QAAS,kBAAMb,EAAU,eAArC,oCAAxF,OACA,cAACkB,EAAA,EAAD,CAAaD,MAAOlB,EAAQe,SAAU,SAACC,GAAD,OAAYf,EAAUe,EAAEC,OAAOC,QAAQI,MAAOjB,EAAc,CAAEkB,OAAQ,iBAAoB,KAChI,8CACA,4BAAIjB,EAAakB,qBACjB,6CACA,4BAAIlB,EAAamB,+BCzBdC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b19170d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button, Container, FormControl } from 'react-bootstrap'\nimport './App.css';\nimport HDKey from 'hdkey'\nimport crypto from 'crypto'\n\nfunction App() {\n  const [seed, setSeed] = useState(crypto.randomBytes(64));\n  const [derive, setDerive] = useState('m');\n\n  const hdKey = HDKey.fromMasterSeed(seed);\n\n  let deriveError = false;\n  const hdKeyDerived = (() => {\n    try {\n      return hdKey.derive(derive);\n    } catch {\n      deriveError = true;\n      return hdKey;\n    }\n  })();\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Form>\n          <Button variant=\"primary\" size=\"lg\" block\n            onClick={() => setSeed(crypto.randomBytes(64))}\n            onChange={(e: any) => setDerive(e.target.value)}\n          >Generate new seed</Button>\n\n          <Container className=\"keys\">\n            <div>Seed</div>\n            <FormControl value={seed.toString('hex')} onChange={(e: any) => setSeed(e.target.value)} />\n            <div>Derivation (<a href=\"#\" onClick={() => setDerive(\"m\")}>Do not use derivation</a> | <a href=\"#\" onClick={() => setDerive(\"m/3000'/0'\")}>Use complex derivation</a>)</div>\n            <FormControl value={derive} onChange={(e: any) => setDerive(e.target.value)} style={deriveError ? { border: 'solid 1px red' } : {}} />\n            <div>Private Key</div>\n            <p>{hdKeyDerived.privateExtendedKey}</p>\n            <div>Public Key</div>\n            <p>{hdKeyDerived.publicExtendedKey}</p>\n          </Container>\n        </Form>\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}